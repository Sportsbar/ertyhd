namespace EmployeePortal.API.Extensions
{
    namespace EmployeePortal.API.Extensions
    {
        public static class DateTimeExtensions
        {
            public static string ToFormattedString(this DateTime dateTime)
            {
                return dateTime.ToString("dd-MM-yyyy");
            }
        }
    }

}












using System;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using Microsoft.IdentityModel.Tokens;

namespace EmployeePortal.API.Helpers
{
    public class JwtTokenGenerator
    {
        private readonly SymmetricSecurityKey _key;

        // Constructor to set the secret key
        public JwtTokenGenerator(string secretKey)
        {
            _key = new SymmetricSecurityKey(Convert.FromBase64String(secretKey));
        }

        // Method to generate a JWT token with the given identity and token expiration
        public string GenerateJwtToken(ClaimsIdentity identity, TimeSpan tokenExpiration)
        {
            var tokenHandler = new JwtSecurityTokenHandler();
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = identity,
                Expires = DateTime.UtcNow.Add(tokenExpiration),
                SigningCredentials = new SigningCredentials(_key, SecurityAlgorithms.HmacSha256Signature)
            };
            var token = tokenHandler.CreateToken(tokenDescriptor);

            return tokenHandler.WriteToken(token);
        }
    }
}



  "JwtTokenGenerator": {
    "Issuer": "your_issuer",
    "Audience": "your_audience",
    "SecretKey": "your_secret_key",
    "TokenExpirationInMinutes": 60
  },
  
  
  
  
  
  
  
  
  
  
  
  
  
  
    using System;
    using System.Net;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Http;
    using Microsoft.Extensions.Logging;

    namespace EmployeePortal.API.Middleware
    {
        public class ExceptionMiddleware
        {
            private readonly RequestDelegate _next;
            private readonly ILogger<ExceptionMiddleware> _logger;

            public ExceptionMiddleware(RequestDelegate next, ILogger<ExceptionMiddleware> logger)
            {
                _next = next;
                _logger = logger;
            }

            public async Task InvokeAsync(HttpContext context)
            {
                try
                {
                    await _next(context);
                }
                catch (Exception ex)
                {
                    _logger.LogError($"An error occurred: {ex}");

                    context.Response.ContentType = "application/json";
                    context.Response.StatusCode = (int)HttpStatusCode.InternalServerError;

                    await context.Response.WriteAsync(new
                    {
                        StatusCode = context.Response.StatusCode,
                        Message = "Internal Server Error."
                    }.ToString());
                }
            }
        }
    }














using System;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Http;
    using Microsoft.Extensions.Logging;

    namespace EmployeePortal.API.Middleware
    {
        public class LogMiddleware
        {
            private readonly RequestDelegate _next;
            private readonly ILogger<LogMiddleware> _logger;

            public LogMiddleware(RequestDelegate next, ILogger<LogMiddleware> logger)
            {
                _next = next;
                _logger = logger;
            }

            public async Task InvokeAsync(HttpContext context)
            {
                _logger.LogInformation($"Request Method: {context.Request.Method}, Request Path: {context.Request.Path}");

                await _next(context);

                _logger.LogInformation($"Response Status Code: {context.Response.StatusCode}");
            }
        }
    }


