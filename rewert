  #region AllTools

        public async Task<object> GetAllTools()
        {
            try
            {
                // Implement your logic to call the "sel_getalltools" stored procedure using Dapper
                var result = await _dbConnection.QueryAsync<object>("sel_getalltools", commandType: CommandType.StoredProcedure);
                return result;
            }
            catch (Exception ex)
            {
                throw new ApiException(ex.Message);
            }
        }

        public async Task<object> InsertTool(AllTools.InsertToolRequest tool)
        {
            try
            {
                // Implement your logic to insert a new tool using the "commit_alltools" stored procedure
                var parameters = new DynamicParameters();
                parameters.Add("@action", "INSERT");
                parameters.Add("@name", tool.Name);
                parameters.Add("@url", tool.Url);
                parameters.Add("@active", tool.Active);

                var result = await _dbConnection.ExecuteAsync("commit_alltools", parameters, commandType: CommandType.StoredProcedure);
                return result;
            }
            catch (Exception ex)
            {
                throw new ApiException(ex.Message);
            }
        }

        public async Task<object> UpdateTool(AllTools.UpdateToolRequest tool)
        {
            try
            {
                // Implement your logic to update an existing tool using the "commit_alltools" stored procedure
                var parameters = new DynamicParameters();
                parameters.Add("@action", "UPDATE");
                parameters.Add("@id", tool.Id);
                parameters.Add("@name", tool.Name);
                parameters.Add("@url", tool.Url);
                parameters.Add("@active", tool.Active);

                var result = await _dbConnection.ExecuteAsync("commit_alltools", parameters, commandType: CommandType.StoredProcedure);
                return result;
            }
            catch (Exception ex)
            {
                throw new ApiException(ex.Message);
            }
        }

        public async Task<object> DeleteTool(AllTools.DeleteToolRequest tool)
        {
            try
            {
                // Implement your logic to delete a tool using the "commit_alltools" stored procedure
                var parameters = new DynamicParameters();
                parameters.Add("@action", "DELETE");
                parameters.Add("@id", tool.Id);

                var result = await _dbConnection.ExecuteAsync("commit_alltools", parameters, commandType: CommandType.StoredProcedure);
                return result;
            }
            catch (Exception ex)
            {
                throw new ApiException(ex.Message);
            }
        }

        #endregion
