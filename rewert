using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Threading.Tasks;
using Dapper;
using Microsoft.AspNetCore.Http;
using EmployeePortal.API.Middleware;
using EmployeePortal.API.Dto;
using System;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using EmployeePortal.API.Interfaces;

namespace EmployeePortal.API.Data
{
    public class DapperRepository : IRepository
    {
        private readonly IConfiguration _configuration;
        private readonly ILogger<ExceptionMiddleware> _exceptionLogger;
        private readonly ILogger<LogMiddleware> _logLogger;
        private readonly IDbConnection _dbConnection;

        public DapperRepository(IConfiguration configuration, ILogger<ExceptionMiddleware> exceptionLogger, ILogger<LogMiddleware> logLogger)
        {
            _configuration = configuration;
            _exceptionLogger = exceptionLogger;
            _logLogger = logLogger;
            _dbConnection = new SqlConnection(_configuration.GetConnectionString("DefaultConnection"));
        }

        public async Task<object> GetEmployeeByIdent(int employee_ident)
        {
            try
            {
                //Set up DynamicParameters object to pass parameters  
                DynamicParameters parameters = new DynamicParameters();
                parameters.Add("@employee_ident", employee_ident);
                parameters.Add("@action", "get");

                //Execute stored procedure and map the returned result to a Customer object  
                return _dbConnection.QuerySingleOrDefault<object>("get_employee_by_ident", parameters, commandType: CommandType.StoredProcedure);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<int> InsertEmployee(CCMSDto entity)
        {
            try
            {
                //Set up DynamicParameters object to pass parameters  
                DynamicParameters parameters = new DynamicParameters();
                parameters.Add("@employee_ident", entity.employee_ident);
                parameters.Add("@employee_first_name", entity.EmpoyleeFirstName);
                parameters.Add("@employee_middle_name", entity.EmpoyleeMiddle);
                parameters.Add("@employee_last_name", entity.EmpoyleeLastName);
                parameters.Add("@action", "insert");

                //Execute stored procedure and map the returned result to a Customer object  
                return _dbConnection.QuerySingleOrDefault<int>("get_employee_by_ident", parameters, commandType: CommandType.StoredProcedure);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<object> UpdateEmployee(CCMSDto entity)
        {
            try
            {
                //Set up DynamicParameters object to pass parameters  
                DynamicParameters parameters = new DynamicParameters();
                parameters.Add("@employee_ident", entity.employee_ident);
                parameters.Add("@employee_first_name", entity.EmpoyleeFirstName);
                parameters.Add("@employee_middle_name", entity.EmpoyleeMiddle);
                parameters.Add("@employee_last_name", entity.EmpoyleeLastName);
                parameters.Add("@action", "update");

                //Execute stored procedure and map the returned result to a Customer object  
                return _dbConnection.QuerySingleOrDefault<int>("get_employee_by_ident", parameters, commandType: CommandType.StoredProcedure);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<bool> DeleteEmployee(int employee_ident)
        {
            try
            {
                // Set up DynamicParameters object to pass parameters  
                DynamicParameters parameters = new DynamicParameters();
                parameters.Add("@employee_ident", employee_ident);
                parameters.Add("@action", "delete");

                // Execute stored procedure and return a bool indicating whether the update was successful  
                int rowsAffected = await _dbConnection.ExecuteAsync("get_employee_by_ident", parameters, commandType: CommandType.StoredProcedure);
                return rowsAffected > 0;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


    }
}
