CREATE PROCEDURE get_employee_by_ident
  @employee_ident int
AS
BEGIN
  SELECT hire_date, employee_ident, employee_first_name, employee_middle_name, employee_last_name, 
    employee_common_name, program_ident, program_abbr_name, program_full_name, location_ident, 
    location_abbr_name, location_full_name, application_date, email1, email2, grade, status, desc_grade, 
    sex, desc_sex, maritial_status, dob, desc_status, client_ident, client_abbr_name, client_full_name, 
    manager_ident, manager_first_name, manager_middle_name, manager_last_name, manager_email1, company_ident, 
    company_full_name, company_group_ident, company_group_abbr_name, company_group_full_name, 
    position_code_group_ident, position_code_department_ident, position_code_group_full_name, 
    position_code_department_full_name, timezone, hourly_status, emea_center, BE_insertion_date
  FROM ccms_employee
  WHERE employee_ident = @employee_ident
END





   private readonly IRepository<ccms_employee> _ccmsaddons;


    public EmployeesController(IDapperService<Employee> employeeRepository, IDapperService<ccms_employee> ccmsemployeeRepository, IRepository<ccms_employee> ccmsaddons)
    {
        _employeeRepository = employeeRepository;
        _ccmsemployeeRepository = ccmsemployeeRepository;
        _ccmsaddons = ccmsaddons;
    }



    [HttpGet("ccms")]
    public async Task<IEnumerable<ccms_employee>> GetCCMSEmployees()
    {
        return await _ccmsemployeeRepository.GetCCMSEmployees();
    }

    [HttpGet("ccms/{ident}")]
    public async Task<ccms_employee> GetEmployeeByIdent(string ident)
    {
        return await _ccmsaddons.GetEmployeeByIdent(ident);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    using EmployeePortal.API.Entities;
using System.Threading.Tasks;

namespace EmployeePortal.API.Interfaces
{
    public interface IRepository<TEntity> where TEntity : class
    {
        
        Task<ccms_employee> GetEmployeeByIdent(string ident);
    }
}

















using EmployeePortal.API.Entities;
using EmployeePortal.API.Interfaces;
using System.Collections.Generic;
using System.Data;
using System.Threading.Tasks;
using Dapper;

namespace EmployeePortal.API.Data
{
    public class DapperRepository<TEntity> : IRepository<TEntity> where TEntity : class
    {
        private readonly IDbConnection _db;

        public DapperRepository(IDbConnection db)
        {
            _db = db;
        }


        public async Task<ccms_employee> GetEmployeeByIdent(string ident)
        {
            var query = "EXEC get_employee_by_ident @ident";
            var result = await _db.QueryAsync<ccms_employee>(query, new { ident });
            return result.FirstOrDefault();
        }

    }
}




// Add services
builder.Services.AddTransient(typeof(IDapperService<>), typeof(DapperService<>));

// Add repositories
builder.Services.AddTransient(typeof(IRepository<>), typeof(DapperRepository<>));
