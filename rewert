public IActionResult GetAssignees()
        {
            try
            {
                var assignees = _context.assignee_accountid
                    .Select(a => new { a.accountId, a.upn, a.name, a.loginId, a.employee_email })
                    .ToList();

                return Json(assignees);
            }
            catch (Exception ex)
            {
                return Json(new { error = ex.Message });
            }
        }
        
         public List<assignee_accountid> GetAssigneeDetails(string upn)
        {
            List<assignee_accountid> assigneeDetails = new List<assignee_accountid>();
            assigneeDetails = _context.assignee_accountid
                .Where(e => e.upn == upn)
                .Select(e => new assignee_accountid { name = e.name, employee_email= e.employee_email })
                .ToList();

            return assigneeDetails;
        }



 #region Create Ticket
        [HttpPost]
        public IActionResult CreateJiraTicket(RequestTaskDetails requestTaskDetails)
        {
            var responseString = string.Empty;
            try
            {
                string username = _configuration["JiraSettings:Username"];
                string password = _configuration["JiraSettings:Password"];
                string URL = _configuration["JiraSettings:URL"];

                var client = new RestClient("https://" + URL + "/rest/api/2/issue/");
                client.Authenticator = new HttpBasicAuthenticator(username, password);

                var request = new RestRequest(Method.POST);


                var fields = new Fields
                {
                    description = requestTaskDetails.description,
                    summary = requestTaskDetails.summary,
                    project = new Project { key = requestTaskDetails.projectJiraKey },
                    issuetype = new IssueType { name = requestTaskDetails.taskType },
                    parent = new Parent { key = requestTaskDetails.epicIssueKey != "null" ? requestTaskDetails.epicIssueKey : requestTaskDetails.issueKey },
                    assignee = new Assignee { emailAddress = requestTaskDetails.assigneeUpn, accountId =requestTaskDetails.assigneeAccountId },
                    customfield_10925 = new customfield_10925 { value = requestTaskDetails.isBacklog },
                    customfield_10658 = new customfield_10658 { value = requestTaskDetails.ragStatus },
                    customfield_10843 = new customfield_10843 { value = requestTaskDetails.billingEffort },
                    customfield_11018 = new customfield_11018 { value = requestTaskDetails.workstream },
                    customfield_10841 = requestTaskDetails.actualStartDate,
                    customfield_10842 = requestTaskDetails.actualEndDate,
                    customfield_10828 = new customfield_10828 { value = requestTaskDetails.status },
                    customfield_10829 = new customfield_10829 { value = requestTaskDetails.subStatus },
                    // customfield_10088 = new customfield_10088 { value = requestTaskDetails.activityType },
                    priority = new priority { name = requestTaskDetails.priority },
                    customfield_10691 = new customfield_10691 { value = requestTaskDetails.countryDropdown },
                    duedate = requestTaskDetails.dueDate,
                    customfield_10689 = requestTaskDetails.prodReleaseDate,
                    customfield_10831 = requestTaskDetails.sdTicketNo,
                    customfield_10108 = new string[] { requestTaskDetails.requesterDetails }


                };

                var fieldsObject = new { fields };
                var jsonString = JsonConvert.SerializeObject(fieldsObject);
                request.AddHeader("Accept", "application/json");
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Content-Type", "application/json");
                request.AddParameter("application/json", jsonString, ParameterType.RequestBody);

                var response = client.Execute(request);
                responseString = JsonConvert.SerializeObject(response.Content);
                

                // Call the TriggerEmail function to check if email should be triggered
                var emailResponse = TriggerEmail(response, jsonString, requestTaskDetails.assigneeUpn);
                return Json(emailResponse);
            }
            
            
            
            
            
            
            
            
            
             public string TriggerEmail(IRestResponse response, string details, string assigneeUpn)
        {
            // Check if the response contains an ID, key, and self
            JObject json = JObject.Parse(response.Content);
            var responseString = JsonConvert.SerializeObject(response.Content);

            //Assinge firstName and lastName 
            List<assignee_accountid> assigneeDetails = new List<assignee_accountid>();
            if (!string.IsNullOrEmpty(assigneeUpn))
            {
                assigneeDetails = GetAssigneeDetails(assigneeUpn);
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
              <div class="col-6">
                <label for="assigneeDropdown">Assignee:</label>
                <select class="form-control" id="assigneeDropdown" name="assigneeDropdown">
                    <option value="">Select Assignee</option>
                </select>
            </div>
            
            
            
            
            function GetAssignees() {
            $.ajax({
                url: '@Url.Action("GetAssignees", "JiraTicketingTool")',
                type: 'GET',
                success: function (result) {
                    var options = "";
                    for (var i = 0; i < result.length; i++) {
                        var assignee = result[i];
                        var optionText = assignee.name + " (" + assignee.loginId + ")";
                        options += "<option value='" + assignee.loginId + "' data-accountid='" + assignee.accountId + "' data-upn='" + assignee.upn + "'>" + optionText + "</option>";
                    }
                    $('#assigneeDropdown').append(options);
                },
                error: function (xhr, status, error) {
                    console.log(xhr.responseText);
                }
            });
        }
        
        
        
        
        function showEndPageView(isMessage) {
            var url = '@Url.Action("EndPage", "JiraTicketingTool", new { isMessage = "__id__" })';
            window.location.href = url.replace('__id__', isMessage);
        }
    </script>
    }
