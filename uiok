using CommonFunctions;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;

public class XrefProductDevelopmentTeam
{
    public string firstName { get; set; }
    public string lastName { get; set; }
    public string employeeEmail { get; set; }

    public int active { get; set; }
}

public class AssignedDetails
{
    public string firstName { get; set; }
    public string lastName { get; set; }
    public string email { get; set; }
    public string accountId { get; set; }
}

public class Program
{
    private static readonly HttpClient httpClient = new HttpClient();

    public static async Task Main(string[] args)
    {
        using var context = new AppDbContext(); // create an instance of AppDbContext

        var employees = context.xref_productdevelopment_team
            .Where(e => e.active == 1)
            .Select(e => new XrefProductDevelopmentTeam { firstName = e.firstName, lastName = e.lastName, employeeEmail = e.employeeEmail })
            .ToList();

        var assignedDetailsList = new List<AssignedDetails>();

        foreach (var employee in employees)
        {
            var url = $"https://geek1121.atlassian.net/rest/api/3/user/search?query={employee.employeeEmail}";

            var response = await httpClient.GetAsync(url);

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var users = JsonConvert.DeserializeObject<List<dynamic>>(content);

                if (users.Count > 0)
                {
                    var accountId = users[0].accountId.ToString();

                    var assignedDetails = new AssignedDetails
                    {
                        firstName = employee.firstName,
                        lastName = employee.lastName,
                        email = employee.employeeEmail,
                        accountId = accountId
                    };

                    assignedDetailsList.Add(assignedDetails);
                }
            }
        }

        // Save the assigned details to the database
        foreach (var assignedDetails in assignedDetailsList)
        {
            context.assigned_details.Add(assignedDetails);
        }

        await context.SaveChangesAsync(); // save changes to the database
    }
}























using Microsoft.EntityFrameworkCore;
using Microsoft.Identity.Client;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CommonFunctions
{
    public class AppDbContext : DbContext
    {
        public DbSet<AssignedDetails> assigned_details { get; set; }
        public DbSet<XrefProductDevelopmentTeam> xref_productdevelopment_team { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlServer("Server=localhost\\MSSQLSERVER02;Database=JIRA_Ticketing_Tool;Trusted_Connection=True;Encrypt=false");
        }
    }
}

//CREATE TABLE assigned_details
//(
//    Id INT IDENTITY(1,1) PRIMARY KEY,
//    firstName VARCHAR(50),
//    lastName VARCHAR(50),
//    email VARCHAR(100),
//    accountId VARCHAR(100)
//);
